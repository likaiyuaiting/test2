#include<iostream>
#include<stack>
using namespace std;

bool judge(const char *);
char getType(const char);
bool match(const char, const char);

//判断字符类型 左括号，右括号 或 其他  
char getType(const char c)
{
	char bracketSet[] = "([{}])";
	int i;
	for (i = 0; i < 6; i++)
	{
		if (bracketSet[i] == c) break;
	}
	if (i<3) return 'l';
	else if (i < 6) return 'r';
	else return 'n';
}

//判断是否为一对匹配的括号  
bool match(const char cL, const char cR)
{
	if (cL == '(')
		return cR == ')' ? true : false;
	else
		return cR == cL + 2 ? true : false;
}

//判断序列是否括号匹配  
bool judge(const char * str)
{
	stack<char> S;      //新建一个栈  
	int i;
	char bracketType;
	for (i = 0; str[i] != '\0'; i++)
	{
		bracketType = getType(str[i]);      //判断是否为括号  

		if (bracketType == 'l')
		{
			S.push(str[i]);     //遇到左括号，入栈  
		}
		else if (bracketType == 'r')
		{
			//遇到左括号，与栈顶比较，若匹配，栈释放顶层元素  
			if (match(S.top(), str[i])) S.pop();
			//否则匹配失败，结束函数  
			else return false;
		}
	}
	//判断栈内是否还有左括号，若无，则匹配成功  
	if (S.empty()) return true;
	else return false;
}
#if 0//效率太低
//判断符号是否合法函数：（）{} [] + - * /
bool symbol_legitimate(char* str)
{
	char symbol[] = { '(', ')', '[', ']', '{', '}', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
	int size = sizeof(str) / sizeof(str[0]);
	int i = 0, j = 0;
	for (i = 0; str[i] != '\0'; i++)
	{
		for (j = 0; j < size; j++)
			if (str[i] == symbol[j])
				break;
			if (j == size)
				return false;
	}
	return true;
}
#endif
//提取字符串中数字
int extract_number(char* str, float* number)
{
	int i = 0, x = 0, y = 0;
	float f = 0.0;
	x = atoi(&str[i]);
	while (str[i] >= '0'&&str[i] <= '9')
	{
		i++;
	}
	if (str[i] = '.')
	{
		i++;
		y = atoi(&str[i]);
		f = (float)y;
		while (f > 1)
		{
			f = f / 10.0;
		}
	}
	while (str[i] >= '0'&&str[i] <= '9')
	{
		i++;
	}
	*number = (float)x + f;
	return i;
}
//将字符串中计算式前缀变后缀表达式放在栈tem中
bool reverse_Polish_notation(char* str, stack<char> tem)
{
	int x = 0, y = 0,k=0;
	stack<char> Symbol;//符号栈
	int tag = 0;
	float f = 0.0;
	for (int i = 0; str[i] != '\0'; i++)
	{
		switch (str[i])
		{
		case '(':
			Symbol.push(str[i++]);
			break;
		case ')':
			while (Symbol.top()!='(')
			{
				tem.push(Symbol.top());
				Symbol.pop();
			}
			Symbol.pop();
			i++;
			break;
			case '0': case '1':case '2':
		case '3':case '4':case '5':
		case '6':case '7':case '8':
			/*i = i + extract_number(&str[i], &f);
			tem.push(f);*/
			printf("%c",str[i]);
			break;
		case '*':
			Symbol.push(str[i++]);
			break;
		case '-':
			if (!Symbol.empty())
			{
				tem.push(Symbol.top());
				Symbol.pop();
			}
			Symbol.push(str[i++]);
			break;
		case '+':		
			if (!Symbol.empty())
			{
				tem.push(Symbol.top());
				Symbol.pop();
			}
			Symbol.push(str[i++]);
			break;
		case '/':
			Symbol.push(str[i++]);
			break;
		default:   return false;
		}
	}
	while (!Symbol.empty())
	{
		tem.push(Symbol.top());
		Symbol.pop();
	}
	return true;
}
//打印栈中元素
//void print_stack(stack<char> tem)
//{
//	while (!tem.empty())
//	{
//		printf("   \n");
//	}
//}
//计算值函数
float iostream_number(stack<char>& tem)
{

}
int main(void)
{
	stack<char> tem;
	char str[20];
	cin >> str;           //读取一个序列  
	if (!judge(str))
	{
		printf("输入括号不匹配！！！\n");
		goto loop;
	}

	bool b= reverse_Polish_notation(str,tem);
	if (b == false)
	{
		printf("输入有非法运算符！！！\n");
		goto loop;
	}
	
loop:
	return 0;
}
